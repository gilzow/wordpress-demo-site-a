name: "TestPullRequestEnv"
run-name: "TestPullRequestEnv"
on:
  workflow_run:
    workflows: [ "platformsh" ]
    types:
      - completed
  pull_request:
    branches:
      - master
      - main

jobs:
  reset-test-state:
    runs-on: ubuntu-latest
    env:
      PLATFORMSH_CLI_TOKEN: ${{ secrets.PSH_CLI_TOKEN }}
      PLATFORM_BRANCH: "pr-${{ github.event.pull_request.number }}"
    steps:
      - name: Get Project ID
        id: get-proj-id
        uses: platformsh/gha-retrieve-projectid@main
        with:
          github_token: ${{ secrets.UPDATE_GITHUB_TOKEN }}
      - name: Sets up the Platformsh CLI
        run: curl -fsSL https://raw.githubusercontent.com/platformsh/cli/main/installer.sh | bash
        shell: bash
      - name: 'Wait for psh and get target url'
        id: get-target-url
        uses: platformsh/gha-retrieve-psh-prenv-url@main
        with:
          github-token: ${{ secrets.UPDATE_GITHUB_TOKEN }}
      - name: reset testing state
        continue-on-error: true
        env:
          PLATFORM_PROJECT: ${{ steps.get-proj-id.outputs.project_id }}
        run: |
          platform ssh 'wp user delete bobby --yes --quiet'

  TestPrEnvironment:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - name: 'Get Project ID'
        id: 'get-proj-id'
        uses: platformsh/gha-retrieve-projectid@main
        with:
          github_token: ${{ secrets.UPDATE_GITHUB_TOKEN }}

      - name: 'Get Production URL'
        id: 'get-prod-url'
        uses: platformsh/gha-retrieve-production-url@main
        with:
          platformsh_token: ${{ secrets.PSH_CLI_TOKEN }}
          project_id: ${{ steps.get-proj-id.outputs.project_id }}

      - name: 'Run Pull Request Tests'
        id: get-target-url
        uses: platformsh/gha-template-pr-tests@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          baseline-url: ${{ steps.get-prod-url.outputs.production_url }}
          delay-start: ${{ vars.DELAY_START }}
          baseline-header-response: $( [ -n "${{ vars.HEADER_RESPONSE }}" ] && echo "${{ vars.HEADER_RESPONSE }}" || echo 200 )
          test-header-response: $( [ -n "${{ vars.HEADER_RESPONSE }}" ] && echo "${{ vars.HEADER_RESPONSE }}" || echo 200 )
          pr-timeout: $( [ -n "${{ vars.PR_ENV_TIMEOUT }}" ] && echo "${{ vars.PR_ENV_TIMEOUT }}" || echo 300 )

  # This one will eventually be migrated into the above reusable workflow
  runE2Etests:
    runs-on: ubuntu-latest
    name: Runs E2E testing on PR Environment
    needs: TestPrEnvironment
    env:
      PLATFORMSH_CLI_TOKEN: ${{ secrets.PSH_CLI_TOKEN }}
      PLATFORM_BRANCH: "pr-${{ github.event.pull_request.number }}"
    steps:
      - name: Get Project ID
        id: get-proj-id
        uses: platformsh/gha-retrieve-projectid@main
        with:
          github_token: ${{ secrets.UPDATE_GITHUB_TOKEN }}
      - name: Sets up the Platformsh CLI
        run: curl -fsSL https://raw.githubusercontent.com/platformsh/cli/main/installer.sh | bash
        shell: bash
      - name: 'Wait for psh and get target url'
        id: get-target-url
        uses: platformsh/gha-retrieve-psh-prenv-url@main
        with:
          github-token: ${{ secrets.UPDATE_GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        name: Check out the repository
      - uses: cypress-io/github-action@v6
        name: Run E2E tests
        id: run-e2e
        with:
          wait-on: ${{ steps.get-target-url.outputs.target_url }}
          record: true
          working-directory: ./.cypress
        env:
          CYPRESS_baseUrl: ${{ steps.get-target-url.outputs.target_url }}
          CYPRESS_environment: platform
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLATFORM_PROJECT: ${{ steps.get-proj-id.outputs.project_id }}
      - name: Remove E2E test user
        if: steps.run-e2e.outcome == 'success'
        run: |
          platform ssh wp user delete bobby --yes
